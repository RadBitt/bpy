# source: https://us1.prisma.sh/leonardo-m-hernandez/bpy-desktop-mysql/dev
# timestamp: Sat Feb 02 2019 20:10:16 GMT-0800 (Pacific Standard Time)

type AggregateCourse {
  count: Int!
}

type AggregateInvoice {
  count: Int!
}

type AggregateQuote {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVessel {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Course implements Node {
  id: ID!
  courseName: String!
  coursePrice: Int!
  courseDays: Int!
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  vessel: Vessel
  participants: Int
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type CourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  courseName: String!
  coursePrice: Int!
  courseDays: Int!
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  participants: Int
  vessel: VesselCreateOneInput
  users: UserCreateManyWithoutCoursesInput
}

input CourseCreateManyWithoutUsersInput {
  create: [CourseCreateWithoutUsersInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateWithoutUsersInput {
  courseName: String!
  coursePrice: Int!
  courseDays: Int!
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  participants: Int
  vessel: VesselCreateOneInput
}

"""An edge in a connection."""
type CourseEdge {
  """The item at the end of the edge."""
  node: Course!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  courseName_ASC
  courseName_DESC
  coursePrice_ASC
  coursePrice_DESC
  courseDays_ASC
  courseDays_DESC
  charterStartDate_ASC
  charterStartDate_DESC
  charterEndDate_ASC
  charterEndDate_DESC
  totalPrice_ASC
  totalPrice_DESC
  participants_ASC
  participants_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CoursePreviousValues {
  id: ID!
  courseName: String!
  coursePrice: Int!
  courseDays: Int!
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  participants: Int
}

input CourseScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  courseName: String

  """All values that are not equal to given value."""
  courseName_not: String

  """All values that are contained in given list."""
  courseName_in: [String!]

  """All values that are not contained in given list."""
  courseName_not_in: [String!]

  """All values less than the given value."""
  courseName_lt: String

  """All values less than or equal the given value."""
  courseName_lte: String

  """All values greater than the given value."""
  courseName_gt: String

  """All values greater than or equal the given value."""
  courseName_gte: String

  """All values containing the given string."""
  courseName_contains: String

  """All values not containing the given string."""
  courseName_not_contains: String

  """All values starting with the given string."""
  courseName_starts_with: String

  """All values not starting with the given string."""
  courseName_not_starts_with: String

  """All values ending with the given string."""
  courseName_ends_with: String

  """All values not ending with the given string."""
  courseName_not_ends_with: String
  coursePrice: Int

  """All values that are not equal to given value."""
  coursePrice_not: Int

  """All values that are contained in given list."""
  coursePrice_in: [Int!]

  """All values that are not contained in given list."""
  coursePrice_not_in: [Int!]

  """All values less than the given value."""
  coursePrice_lt: Int

  """All values less than or equal the given value."""
  coursePrice_lte: Int

  """All values greater than the given value."""
  coursePrice_gt: Int

  """All values greater than or equal the given value."""
  coursePrice_gte: Int
  courseDays: Int

  """All values that are not equal to given value."""
  courseDays_not: Int

  """All values that are contained in given list."""
  courseDays_in: [Int!]

  """All values that are not contained in given list."""
  courseDays_not_in: [Int!]

  """All values less than the given value."""
  courseDays_lt: Int

  """All values less than or equal the given value."""
  courseDays_lte: Int

  """All values greater than the given value."""
  courseDays_gt: Int

  """All values greater than or equal the given value."""
  courseDays_gte: Int
  charterStartDate: String

  """All values that are not equal to given value."""
  charterStartDate_not: String

  """All values that are contained in given list."""
  charterStartDate_in: [String!]

  """All values that are not contained in given list."""
  charterStartDate_not_in: [String!]

  """All values less than the given value."""
  charterStartDate_lt: String

  """All values less than or equal the given value."""
  charterStartDate_lte: String

  """All values greater than the given value."""
  charterStartDate_gt: String

  """All values greater than or equal the given value."""
  charterStartDate_gte: String

  """All values containing the given string."""
  charterStartDate_contains: String

  """All values not containing the given string."""
  charterStartDate_not_contains: String

  """All values starting with the given string."""
  charterStartDate_starts_with: String

  """All values not starting with the given string."""
  charterStartDate_not_starts_with: String

  """All values ending with the given string."""
  charterStartDate_ends_with: String

  """All values not ending with the given string."""
  charterStartDate_not_ends_with: String
  charterEndDate: String

  """All values that are not equal to given value."""
  charterEndDate_not: String

  """All values that are contained in given list."""
  charterEndDate_in: [String!]

  """All values that are not contained in given list."""
  charterEndDate_not_in: [String!]

  """All values less than the given value."""
  charterEndDate_lt: String

  """All values less than or equal the given value."""
  charterEndDate_lte: String

  """All values greater than the given value."""
  charterEndDate_gt: String

  """All values greater than or equal the given value."""
  charterEndDate_gte: String

  """All values containing the given string."""
  charterEndDate_contains: String

  """All values not containing the given string."""
  charterEndDate_not_contains: String

  """All values starting with the given string."""
  charterEndDate_starts_with: String

  """All values not starting with the given string."""
  charterEndDate_not_starts_with: String

  """All values ending with the given string."""
  charterEndDate_ends_with: String

  """All values not ending with the given string."""
  charterEndDate_not_ends_with: String
  totalPrice: Int

  """All values that are not equal to given value."""
  totalPrice_not: Int

  """All values that are contained in given list."""
  totalPrice_in: [Int!]

  """All values that are not contained in given list."""
  totalPrice_not_in: [Int!]

  """All values less than the given value."""
  totalPrice_lt: Int

  """All values less than or equal the given value."""
  totalPrice_lte: Int

  """All values greater than the given value."""
  totalPrice_gt: Int

  """All values greater than or equal the given value."""
  totalPrice_gte: Int
  participants: Int

  """All values that are not equal to given value."""
  participants_not: Int

  """All values that are contained in given list."""
  participants_in: [Int!]

  """All values that are not contained in given list."""
  participants_not_in: [Int!]

  """All values less than the given value."""
  participants_lt: Int

  """All values less than or equal the given value."""
  participants_lte: Int

  """All values greater than the given value."""
  participants_gt: Int

  """All values greater than or equal the given value."""
  participants_gte: Int
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
}

input CourseUpdateInput {
  courseName: String
  coursePrice: Int
  courseDays: Int
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  participants: Int
  vessel: VesselUpdateOneInput
  users: UserUpdateManyWithoutCoursesInput
}

input CourseUpdateManyDataInput {
  courseName: String
  coursePrice: Int
  courseDays: Int
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  participants: Int
}

input CourseUpdateManyMutationInput {
  courseName: String
  coursePrice: Int
  courseDays: Int
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  participants: Int
}

input CourseUpdateManyWithoutUsersInput {
  create: [CourseCreateWithoutUsersInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
  deleteMany: [CourseScalarWhereInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutUsersInput!]
}

input CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput!
  data: CourseUpdateManyDataInput!
}

input CourseUpdateWithoutUsersDataInput {
  courseName: String
  coursePrice: Int
  courseDays: Int
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  participants: Int
  vessel: VesselUpdateOneInput
}

input CourseUpdateWithWhereUniqueWithoutUsersInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutUsersDataInput!
}

input CourseUpsertWithWhereUniqueWithoutUsersInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutUsersDataInput!
  create: CourseCreateWithoutUsersInput!
}

input CourseWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  courseName: String

  """All values that are not equal to given value."""
  courseName_not: String

  """All values that are contained in given list."""
  courseName_in: [String!]

  """All values that are not contained in given list."""
  courseName_not_in: [String!]

  """All values less than the given value."""
  courseName_lt: String

  """All values less than or equal the given value."""
  courseName_lte: String

  """All values greater than the given value."""
  courseName_gt: String

  """All values greater than or equal the given value."""
  courseName_gte: String

  """All values containing the given string."""
  courseName_contains: String

  """All values not containing the given string."""
  courseName_not_contains: String

  """All values starting with the given string."""
  courseName_starts_with: String

  """All values not starting with the given string."""
  courseName_not_starts_with: String

  """All values ending with the given string."""
  courseName_ends_with: String

  """All values not ending with the given string."""
  courseName_not_ends_with: String
  coursePrice: Int

  """All values that are not equal to given value."""
  coursePrice_not: Int

  """All values that are contained in given list."""
  coursePrice_in: [Int!]

  """All values that are not contained in given list."""
  coursePrice_not_in: [Int!]

  """All values less than the given value."""
  coursePrice_lt: Int

  """All values less than or equal the given value."""
  coursePrice_lte: Int

  """All values greater than the given value."""
  coursePrice_gt: Int

  """All values greater than or equal the given value."""
  coursePrice_gte: Int
  courseDays: Int

  """All values that are not equal to given value."""
  courseDays_not: Int

  """All values that are contained in given list."""
  courseDays_in: [Int!]

  """All values that are not contained in given list."""
  courseDays_not_in: [Int!]

  """All values less than the given value."""
  courseDays_lt: Int

  """All values less than or equal the given value."""
  courseDays_lte: Int

  """All values greater than the given value."""
  courseDays_gt: Int

  """All values greater than or equal the given value."""
  courseDays_gte: Int
  charterStartDate: String

  """All values that are not equal to given value."""
  charterStartDate_not: String

  """All values that are contained in given list."""
  charterStartDate_in: [String!]

  """All values that are not contained in given list."""
  charterStartDate_not_in: [String!]

  """All values less than the given value."""
  charterStartDate_lt: String

  """All values less than or equal the given value."""
  charterStartDate_lte: String

  """All values greater than the given value."""
  charterStartDate_gt: String

  """All values greater than or equal the given value."""
  charterStartDate_gte: String

  """All values containing the given string."""
  charterStartDate_contains: String

  """All values not containing the given string."""
  charterStartDate_not_contains: String

  """All values starting with the given string."""
  charterStartDate_starts_with: String

  """All values not starting with the given string."""
  charterStartDate_not_starts_with: String

  """All values ending with the given string."""
  charterStartDate_ends_with: String

  """All values not ending with the given string."""
  charterStartDate_not_ends_with: String
  charterEndDate: String

  """All values that are not equal to given value."""
  charterEndDate_not: String

  """All values that are contained in given list."""
  charterEndDate_in: [String!]

  """All values that are not contained in given list."""
  charterEndDate_not_in: [String!]

  """All values less than the given value."""
  charterEndDate_lt: String

  """All values less than or equal the given value."""
  charterEndDate_lte: String

  """All values greater than the given value."""
  charterEndDate_gt: String

  """All values greater than or equal the given value."""
  charterEndDate_gte: String

  """All values containing the given string."""
  charterEndDate_contains: String

  """All values not containing the given string."""
  charterEndDate_not_contains: String

  """All values starting with the given string."""
  charterEndDate_starts_with: String

  """All values not starting with the given string."""
  charterEndDate_not_starts_with: String

  """All values ending with the given string."""
  charterEndDate_ends_with: String

  """All values not ending with the given string."""
  charterEndDate_not_ends_with: String
  totalPrice: Int

  """All values that are not equal to given value."""
  totalPrice_not: Int

  """All values that are contained in given list."""
  totalPrice_in: [Int!]

  """All values that are not contained in given list."""
  totalPrice_not_in: [Int!]

  """All values less than the given value."""
  totalPrice_lt: Int

  """All values less than or equal the given value."""
  totalPrice_lte: Int

  """All values greater than the given value."""
  totalPrice_gt: Int

  """All values greater than or equal the given value."""
  totalPrice_gte: Int
  participants: Int

  """All values that are not equal to given value."""
  participants_not: Int

  """All values that are contained in given list."""
  participants_in: [Int!]

  """All values that are not contained in given list."""
  participants_not_in: [Int!]

  """All values less than the given value."""
  participants_lt: Int

  """All values less than or equal the given value."""
  participants_lte: Int

  """All values greater than the given value."""
  participants_gt: Int

  """All values greater than or equal the given value."""
  participants_gte: Int
  vessel: VesselWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input CourseWhereUniqueInput {
  id: ID
}

type Invoice implements Node {
  id: ID!
  user: User
  vessel: Vessel
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
}

"""A connection to a list of items."""
type InvoiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InvoiceEdge]!
  aggregate: AggregateInvoice!
}

input InvoiceCreateInput {
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  user: UserCreateOneWithoutInvoicesInput
  vessel: VesselCreateOneInput
}

input InvoiceCreateManyWithoutUserInput {
  create: [InvoiceCreateWithoutUserInput!]
  connect: [InvoiceWhereUniqueInput!]
}

input InvoiceCreateWithoutUserInput {
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  vessel: VesselCreateOneInput
}

"""An edge in a connection."""
type InvoiceEdge {
  """The item at the end of the edge."""
  node: Invoice!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InvoiceOrderByInput {
  id_ASC
  id_DESC
  charterStartDate_ASC
  charterStartDate_DESC
  charterEndDate_ASC
  charterEndDate_DESC
  totalPrice_ASC
  totalPrice_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InvoicePreviousValues {
  id: ID!
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
}

input InvoiceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  charterStartDate: String

  """All values that are not equal to given value."""
  charterStartDate_not: String

  """All values that are contained in given list."""
  charterStartDate_in: [String!]

  """All values that are not contained in given list."""
  charterStartDate_not_in: [String!]

  """All values less than the given value."""
  charterStartDate_lt: String

  """All values less than or equal the given value."""
  charterStartDate_lte: String

  """All values greater than the given value."""
  charterStartDate_gt: String

  """All values greater than or equal the given value."""
  charterStartDate_gte: String

  """All values containing the given string."""
  charterStartDate_contains: String

  """All values not containing the given string."""
  charterStartDate_not_contains: String

  """All values starting with the given string."""
  charterStartDate_starts_with: String

  """All values not starting with the given string."""
  charterStartDate_not_starts_with: String

  """All values ending with the given string."""
  charterStartDate_ends_with: String

  """All values not ending with the given string."""
  charterStartDate_not_ends_with: String
  charterEndDate: String

  """All values that are not equal to given value."""
  charterEndDate_not: String

  """All values that are contained in given list."""
  charterEndDate_in: [String!]

  """All values that are not contained in given list."""
  charterEndDate_not_in: [String!]

  """All values less than the given value."""
  charterEndDate_lt: String

  """All values less than or equal the given value."""
  charterEndDate_lte: String

  """All values greater than the given value."""
  charterEndDate_gt: String

  """All values greater than or equal the given value."""
  charterEndDate_gte: String

  """All values containing the given string."""
  charterEndDate_contains: String

  """All values not containing the given string."""
  charterEndDate_not_contains: String

  """All values starting with the given string."""
  charterEndDate_starts_with: String

  """All values not starting with the given string."""
  charterEndDate_not_starts_with: String

  """All values ending with the given string."""
  charterEndDate_ends_with: String

  """All values not ending with the given string."""
  charterEndDate_not_ends_with: String
  totalPrice: Int

  """All values that are not equal to given value."""
  totalPrice_not: Int

  """All values that are contained in given list."""
  totalPrice_in: [Int!]

  """All values that are not contained in given list."""
  totalPrice_not_in: [Int!]

  """All values less than the given value."""
  totalPrice_lt: Int

  """All values less than or equal the given value."""
  totalPrice_lte: Int

  """All values greater than the given value."""
  totalPrice_gt: Int

  """All values greater than or equal the given value."""
  totalPrice_gte: Int
}

type InvoiceSubscriptionPayload {
  mutation: MutationType!
  node: Invoice
  updatedFields: [String!]
  previousValues: InvoicePreviousValues
}

input InvoiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InvoiceWhereInput
}

input InvoiceUpdateInput {
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  user: UserUpdateOneWithoutInvoicesInput
  vessel: VesselUpdateOneInput
}

input InvoiceUpdateManyDataInput {
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
}

input InvoiceUpdateManyMutationInput {
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
}

input InvoiceUpdateManyWithoutUserInput {
  create: [InvoiceCreateWithoutUserInput!]
  connect: [InvoiceWhereUniqueInput!]
  set: [InvoiceWhereUniqueInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  delete: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [InvoiceUpdateManyWithWhereNestedInput!]
  deleteMany: [InvoiceScalarWhereInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutUserInput!]
}

input InvoiceUpdateManyWithWhereNestedInput {
  where: InvoiceScalarWhereInput!
  data: InvoiceUpdateManyDataInput!
}

input InvoiceUpdateWithoutUserDataInput {
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  vessel: VesselUpdateOneInput
}

input InvoiceUpdateWithWhereUniqueWithoutUserInput {
  where: InvoiceWhereUniqueInput!
  data: InvoiceUpdateWithoutUserDataInput!
}

input InvoiceUpsertWithWhereUniqueWithoutUserInput {
  where: InvoiceWhereUniqueInput!
  update: InvoiceUpdateWithoutUserDataInput!
  create: InvoiceCreateWithoutUserInput!
}

input InvoiceWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  charterStartDate: String

  """All values that are not equal to given value."""
  charterStartDate_not: String

  """All values that are contained in given list."""
  charterStartDate_in: [String!]

  """All values that are not contained in given list."""
  charterStartDate_not_in: [String!]

  """All values less than the given value."""
  charterStartDate_lt: String

  """All values less than or equal the given value."""
  charterStartDate_lte: String

  """All values greater than the given value."""
  charterStartDate_gt: String

  """All values greater than or equal the given value."""
  charterStartDate_gte: String

  """All values containing the given string."""
  charterStartDate_contains: String

  """All values not containing the given string."""
  charterStartDate_not_contains: String

  """All values starting with the given string."""
  charterStartDate_starts_with: String

  """All values not starting with the given string."""
  charterStartDate_not_starts_with: String

  """All values ending with the given string."""
  charterStartDate_ends_with: String

  """All values not ending with the given string."""
  charterStartDate_not_ends_with: String
  charterEndDate: String

  """All values that are not equal to given value."""
  charterEndDate_not: String

  """All values that are contained in given list."""
  charterEndDate_in: [String!]

  """All values that are not contained in given list."""
  charterEndDate_not_in: [String!]

  """All values less than the given value."""
  charterEndDate_lt: String

  """All values less than or equal the given value."""
  charterEndDate_lte: String

  """All values greater than the given value."""
  charterEndDate_gt: String

  """All values greater than or equal the given value."""
  charterEndDate_gte: String

  """All values containing the given string."""
  charterEndDate_contains: String

  """All values not containing the given string."""
  charterEndDate_not_contains: String

  """All values starting with the given string."""
  charterEndDate_starts_with: String

  """All values not starting with the given string."""
  charterEndDate_not_starts_with: String

  """All values ending with the given string."""
  charterEndDate_ends_with: String

  """All values not ending with the given string."""
  charterEndDate_not_ends_with: String
  totalPrice: Int

  """All values that are not equal to given value."""
  totalPrice_not: Int

  """All values that are contained in given list."""
  totalPrice_in: [Int!]

  """All values that are not contained in given list."""
  totalPrice_not_in: [Int!]

  """All values less than the given value."""
  totalPrice_lt: Int

  """All values less than or equal the given value."""
  totalPrice_lte: Int

  """All values greater than the given value."""
  totalPrice_gt: Int

  """All values greater than or equal the given value."""
  totalPrice_gte: Int
  user: UserWhereInput
  vessel: VesselWhereInput
}

input InvoiceWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createInvoice(data: InvoiceCreateInput!): Invoice!
  createQuote(data: QuoteCreateInput!): Quote!
  createCourse(data: CourseCreateInput!): Course!
  createVessel(data: VesselCreateInput!): Vessel!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateInvoice(data: InvoiceUpdateInput!, where: InvoiceWhereUniqueInput!): Invoice
  updateQuote(data: QuoteUpdateInput!, where: QuoteWhereUniqueInput!): Quote
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateVessel(data: VesselUpdateInput!, where: VesselWhereUniqueInput!): Vessel
  deleteUser(where: UserWhereUniqueInput!): User
  deleteInvoice(where: InvoiceWhereUniqueInput!): Invoice
  deleteQuote(where: QuoteWhereUniqueInput!): Quote
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteVessel(where: VesselWhereUniqueInput!): Vessel
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertInvoice(where: InvoiceWhereUniqueInput!, create: InvoiceCreateInput!, update: InvoiceUpdateInput!): Invoice!
  upsertQuote(where: QuoteWhereUniqueInput!, create: QuoteCreateInput!, update: QuoteUpdateInput!): Quote!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  upsertVessel(where: VesselWhereUniqueInput!, create: VesselCreateInput!, update: VesselUpdateInput!): Vessel!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyInvoices(data: InvoiceUpdateManyMutationInput!, where: InvoiceWhereInput): BatchPayload!
  updateManyQuotes(data: QuoteUpdateManyMutationInput!, where: QuoteWhereInput): BatchPayload!
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  updateManyVessels(data: VesselUpdateManyMutationInput!, where: VesselWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyInvoices(where: InvoiceWhereInput): BatchPayload!
  deleteManyQuotes(where: QuoteWhereInput): BatchPayload!
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  deleteManyVessels(where: VesselWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  invoices(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Invoice]!
  quotes(where: QuoteWhereInput, orderBy: QuoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quote]!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  vessels(where: VesselWhereInput, orderBy: VesselOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vessel]!
  user(where: UserWhereUniqueInput!): User
  invoice(where: InvoiceWhereUniqueInput!): Invoice
  quote(where: QuoteWhereUniqueInput!): Quote
  course(where: CourseWhereUniqueInput!): Course
  vessel(where: VesselWhereUniqueInput!): Vessel
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  invoicesConnection(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InvoiceConnection!
  quotesConnection(where: QuoteWhereInput, orderBy: QuoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuoteConnection!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  vesselsConnection(where: VesselWhereInput, orderBy: VesselOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VesselConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Quote implements Node {
  id: ID!
  user: User
  vessel: Vessel
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
}

"""A connection to a list of items."""
type QuoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuoteEdge]!
  aggregate: AggregateQuote!
}

input QuoteCreateInput {
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  user: UserCreateOneWithoutQuotesInput
  vessel: VesselCreateOneInput
}

input QuoteCreateManyWithoutUserInput {
  create: [QuoteCreateWithoutUserInput!]
  connect: [QuoteWhereUniqueInput!]
}

input QuoteCreateWithoutUserInput {
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  vessel: VesselCreateOneInput
}

"""An edge in a connection."""
type QuoteEdge {
  """The item at the end of the edge."""
  node: Quote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuoteOrderByInput {
  id_ASC
  id_DESC
  charterStartDate_ASC
  charterStartDate_DESC
  charterEndDate_ASC
  charterEndDate_DESC
  totalPrice_ASC
  totalPrice_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuotePreviousValues {
  id: ID!
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
}

input QuoteScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [QuoteScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuoteScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuoteScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  charterStartDate: String

  """All values that are not equal to given value."""
  charterStartDate_not: String

  """All values that are contained in given list."""
  charterStartDate_in: [String!]

  """All values that are not contained in given list."""
  charterStartDate_not_in: [String!]

  """All values less than the given value."""
  charterStartDate_lt: String

  """All values less than or equal the given value."""
  charterStartDate_lte: String

  """All values greater than the given value."""
  charterStartDate_gt: String

  """All values greater than or equal the given value."""
  charterStartDate_gte: String

  """All values containing the given string."""
  charterStartDate_contains: String

  """All values not containing the given string."""
  charterStartDate_not_contains: String

  """All values starting with the given string."""
  charterStartDate_starts_with: String

  """All values not starting with the given string."""
  charterStartDate_not_starts_with: String

  """All values ending with the given string."""
  charterStartDate_ends_with: String

  """All values not ending with the given string."""
  charterStartDate_not_ends_with: String
  charterEndDate: String

  """All values that are not equal to given value."""
  charterEndDate_not: String

  """All values that are contained in given list."""
  charterEndDate_in: [String!]

  """All values that are not contained in given list."""
  charterEndDate_not_in: [String!]

  """All values less than the given value."""
  charterEndDate_lt: String

  """All values less than or equal the given value."""
  charterEndDate_lte: String

  """All values greater than the given value."""
  charterEndDate_gt: String

  """All values greater than or equal the given value."""
  charterEndDate_gte: String

  """All values containing the given string."""
  charterEndDate_contains: String

  """All values not containing the given string."""
  charterEndDate_not_contains: String

  """All values starting with the given string."""
  charterEndDate_starts_with: String

  """All values not starting with the given string."""
  charterEndDate_not_starts_with: String

  """All values ending with the given string."""
  charterEndDate_ends_with: String

  """All values not ending with the given string."""
  charterEndDate_not_ends_with: String
  totalPrice: Int

  """All values that are not equal to given value."""
  totalPrice_not: Int

  """All values that are contained in given list."""
  totalPrice_in: [Int!]

  """All values that are not contained in given list."""
  totalPrice_not_in: [Int!]

  """All values less than the given value."""
  totalPrice_lt: Int

  """All values less than or equal the given value."""
  totalPrice_lte: Int

  """All values greater than the given value."""
  totalPrice_gt: Int

  """All values greater than or equal the given value."""
  totalPrice_gte: Int
}

type QuoteSubscriptionPayload {
  mutation: MutationType!
  node: Quote
  updatedFields: [String!]
  previousValues: QuotePreviousValues
}

input QuoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuoteWhereInput
}

input QuoteUpdateInput {
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  user: UserUpdateOneWithoutQuotesInput
  vessel: VesselUpdateOneInput
}

input QuoteUpdateManyDataInput {
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
}

input QuoteUpdateManyMutationInput {
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
}

input QuoteUpdateManyWithoutUserInput {
  create: [QuoteCreateWithoutUserInput!]
  connect: [QuoteWhereUniqueInput!]
  set: [QuoteWhereUniqueInput!]
  disconnect: [QuoteWhereUniqueInput!]
  delete: [QuoteWhereUniqueInput!]
  update: [QuoteUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [QuoteUpdateManyWithWhereNestedInput!]
  deleteMany: [QuoteScalarWhereInput!]
  upsert: [QuoteUpsertWithWhereUniqueWithoutUserInput!]
}

input QuoteUpdateManyWithWhereNestedInput {
  where: QuoteScalarWhereInput!
  data: QuoteUpdateManyDataInput!
}

input QuoteUpdateWithoutUserDataInput {
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
  vessel: VesselUpdateOneInput
}

input QuoteUpdateWithWhereUniqueWithoutUserInput {
  where: QuoteWhereUniqueInput!
  data: QuoteUpdateWithoutUserDataInput!
}

input QuoteUpsertWithWhereUniqueWithoutUserInput {
  where: QuoteWhereUniqueInput!
  update: QuoteUpdateWithoutUserDataInput!
  create: QuoteCreateWithoutUserInput!
}

input QuoteWhereInput {
  """Logical AND on all given filters."""
  AND: [QuoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  charterStartDate: String

  """All values that are not equal to given value."""
  charterStartDate_not: String

  """All values that are contained in given list."""
  charterStartDate_in: [String!]

  """All values that are not contained in given list."""
  charterStartDate_not_in: [String!]

  """All values less than the given value."""
  charterStartDate_lt: String

  """All values less than or equal the given value."""
  charterStartDate_lte: String

  """All values greater than the given value."""
  charterStartDate_gt: String

  """All values greater than or equal the given value."""
  charterStartDate_gte: String

  """All values containing the given string."""
  charterStartDate_contains: String

  """All values not containing the given string."""
  charterStartDate_not_contains: String

  """All values starting with the given string."""
  charterStartDate_starts_with: String

  """All values not starting with the given string."""
  charterStartDate_not_starts_with: String

  """All values ending with the given string."""
  charterStartDate_ends_with: String

  """All values not ending with the given string."""
  charterStartDate_not_ends_with: String
  charterEndDate: String

  """All values that are not equal to given value."""
  charterEndDate_not: String

  """All values that are contained in given list."""
  charterEndDate_in: [String!]

  """All values that are not contained in given list."""
  charterEndDate_not_in: [String!]

  """All values less than the given value."""
  charterEndDate_lt: String

  """All values less than or equal the given value."""
  charterEndDate_lte: String

  """All values greater than the given value."""
  charterEndDate_gt: String

  """All values greater than or equal the given value."""
  charterEndDate_gte: String

  """All values containing the given string."""
  charterEndDate_contains: String

  """All values not containing the given string."""
  charterEndDate_not_contains: String

  """All values starting with the given string."""
  charterEndDate_starts_with: String

  """All values not starting with the given string."""
  charterEndDate_not_starts_with: String

  """All values ending with the given string."""
  charterEndDate_ends_with: String

  """All values not ending with the given string."""
  charterEndDate_not_ends_with: String
  totalPrice: Int

  """All values that are not equal to given value."""
  totalPrice_not: Int

  """All values that are contained in given list."""
  totalPrice_in: [Int!]

  """All values that are not contained in given list."""
  totalPrice_not_in: [Int!]

  """All values less than the given value."""
  totalPrice_lt: Int

  """All values less than or equal the given value."""
  totalPrice_lte: Int

  """All values greater than the given value."""
  totalPrice_gt: Int

  """All values greater than or equal the given value."""
  totalPrice_gte: Int
  user: UserWhereInput
  vessel: VesselWhereInput
}

input QuoteWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  invoice(where: InvoiceSubscriptionWhereInput): InvoiceSubscriptionPayload
  quote(where: QuoteSubscriptionWhereInput): QuoteSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  vessel(where: VesselSubscriptionWhereInput): VesselSubscriptionPayload
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  invoices(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Invoice!]
  quotes(where: QuoteWhereInput, orderBy: QuoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quote!]
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  email: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  invoices: InvoiceCreateManyWithoutUserInput
  quotes: QuoteCreateManyWithoutUserInput
  courses: CourseCreateManyWithoutUsersInput
}

input UserCreateManyWithoutCoursesInput {
  create: [UserCreateWithoutCoursesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutInvoicesInput {
  create: UserCreateWithoutInvoicesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuotesInput {
  create: UserCreateWithoutQuotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCoursesInput {
  firstName: String!
  lastName: String!
  email: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  invoices: InvoiceCreateManyWithoutUserInput
  quotes: QuoteCreateManyWithoutUserInput
}

input UserCreateWithoutInvoicesInput {
  firstName: String!
  lastName: String!
  email: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  quotes: QuoteCreateManyWithoutUserInput
  courses: CourseCreateManyWithoutUsersInput
}

input UserCreateWithoutQuotesInput {
  firstName: String!
  lastName: String!
  email: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  invoices: InvoiceCreateManyWithoutUserInput
  courses: CourseCreateManyWithoutUsersInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  address1: String

  """All values that are not equal to given value."""
  address1_not: String

  """All values that are contained in given list."""
  address1_in: [String!]

  """All values that are not contained in given list."""
  address1_not_in: [String!]

  """All values less than the given value."""
  address1_lt: String

  """All values less than or equal the given value."""
  address1_lte: String

  """All values greater than the given value."""
  address1_gt: String

  """All values greater than or equal the given value."""
  address1_gte: String

  """All values containing the given string."""
  address1_contains: String

  """All values not containing the given string."""
  address1_not_contains: String

  """All values starting with the given string."""
  address1_starts_with: String

  """All values not starting with the given string."""
  address1_not_starts_with: String

  """All values ending with the given string."""
  address1_ends_with: String

  """All values not ending with the given string."""
  address1_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: Int

  """All values that are not equal to given value."""
  zip_not: Int

  """All values that are contained in given list."""
  zip_in: [Int!]

  """All values that are not contained in given list."""
  zip_not_in: [Int!]

  """All values less than the given value."""
  zip_lt: Int

  """All values less than or equal the given value."""
  zip_lte: Int

  """All values greater than the given value."""
  zip_gt: Int

  """All values greater than or equal the given value."""
  zip_gte: Int
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  invoices: InvoiceUpdateManyWithoutUserInput
  quotes: QuoteUpdateManyWithoutUserInput
  courses: CourseUpdateManyWithoutUsersInput
}

input UserUpdateManyDataInput {
  firstName: String
  lastName: String
  email: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
}

input UserUpdateManyWithoutCoursesInput {
  create: [UserCreateWithoutCoursesInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCoursesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCoursesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutInvoicesInput {
  create: UserCreateWithoutInvoicesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutInvoicesDataInput
  upsert: UserUpsertWithoutInvoicesInput
}

input UserUpdateOneWithoutQuotesInput {
  create: UserCreateWithoutQuotesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutQuotesDataInput
  upsert: UserUpsertWithoutQuotesInput
}

input UserUpdateWithoutCoursesDataInput {
  firstName: String
  lastName: String
  email: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  invoices: InvoiceUpdateManyWithoutUserInput
  quotes: QuoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutInvoicesDataInput {
  firstName: String
  lastName: String
  email: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  quotes: QuoteUpdateManyWithoutUserInput
  courses: CourseUpdateManyWithoutUsersInput
}

input UserUpdateWithoutQuotesDataInput {
  firstName: String
  lastName: String
  email: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  invoices: InvoiceUpdateManyWithoutUserInput
  courses: CourseUpdateManyWithoutUsersInput
}

input UserUpdateWithWhereUniqueWithoutCoursesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCoursesDataInput!
}

input UserUpsertWithoutInvoicesInput {
  update: UserUpdateWithoutInvoicesDataInput!
  create: UserCreateWithoutInvoicesInput!
}

input UserUpsertWithoutQuotesInput {
  update: UserUpdateWithoutQuotesDataInput!
  create: UserCreateWithoutQuotesInput!
}

input UserUpsertWithWhereUniqueWithoutCoursesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCoursesDataInput!
  create: UserCreateWithoutCoursesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  address1: String

  """All values that are not equal to given value."""
  address1_not: String

  """All values that are contained in given list."""
  address1_in: [String!]

  """All values that are not contained in given list."""
  address1_not_in: [String!]

  """All values less than the given value."""
  address1_lt: String

  """All values less than or equal the given value."""
  address1_lte: String

  """All values greater than the given value."""
  address1_gt: String

  """All values greater than or equal the given value."""
  address1_gte: String

  """All values containing the given string."""
  address1_contains: String

  """All values not containing the given string."""
  address1_not_contains: String

  """All values starting with the given string."""
  address1_starts_with: String

  """All values not starting with the given string."""
  address1_not_starts_with: String

  """All values ending with the given string."""
  address1_ends_with: String

  """All values not ending with the given string."""
  address1_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: Int

  """All values that are not equal to given value."""
  zip_not: Int

  """All values that are contained in given list."""
  zip_in: [Int!]

  """All values that are not contained in given list."""
  zip_not_in: [Int!]

  """All values less than the given value."""
  zip_lt: Int

  """All values less than or equal the given value."""
  zip_lte: Int

  """All values greater than the given value."""
  zip_gt: Int

  """All values greater than or equal the given value."""
  zip_gte: Int
  invoices_every: InvoiceWhereInput
  invoices_some: InvoiceWhereInput
  invoices_none: InvoiceWhereInput
  quotes_every: QuoteWhereInput
  quotes_some: QuoteWhereInput
  quotes_none: QuoteWhereInput
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
}

input UserWhereUniqueInput {
  id: ID
}

type Vessel implements Node {
  id: ID!
  vesselName: String!
  weekNightPrice: Int!
  weekendNightPrice: Int!
}

"""A connection to a list of items."""
type VesselConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VesselEdge]!
  aggregate: AggregateVessel!
}

input VesselCreateInput {
  vesselName: String!
  weekNightPrice: Int!
  weekendNightPrice: Int!
}

input VesselCreateOneInput {
  create: VesselCreateInput
  connect: VesselWhereUniqueInput
}

"""An edge in a connection."""
type VesselEdge {
  """The item at the end of the edge."""
  node: Vessel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VesselOrderByInput {
  id_ASC
  id_DESC
  vesselName_ASC
  vesselName_DESC
  weekNightPrice_ASC
  weekNightPrice_DESC
  weekendNightPrice_ASC
  weekendNightPrice_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VesselPreviousValues {
  id: ID!
  vesselName: String!
  weekNightPrice: Int!
  weekendNightPrice: Int!
}

type VesselSubscriptionPayload {
  mutation: MutationType!
  node: Vessel
  updatedFields: [String!]
  previousValues: VesselPreviousValues
}

input VesselSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VesselSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VesselSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VesselSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VesselWhereInput
}

input VesselUpdateDataInput {
  vesselName: String
  weekNightPrice: Int
  weekendNightPrice: Int
}

input VesselUpdateInput {
  vesselName: String
  weekNightPrice: Int
  weekendNightPrice: Int
}

input VesselUpdateManyMutationInput {
  vesselName: String
  weekNightPrice: Int
  weekendNightPrice: Int
}

input VesselUpdateOneInput {
  create: VesselCreateInput
  connect: VesselWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: VesselUpdateDataInput
  upsert: VesselUpsertNestedInput
}

input VesselUpsertNestedInput {
  update: VesselUpdateDataInput!
  create: VesselCreateInput!
}

input VesselWhereInput {
  """Logical AND on all given filters."""
  AND: [VesselWhereInput!]

  """Logical OR on all given filters."""
  OR: [VesselWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VesselWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  vesselName: String

  """All values that are not equal to given value."""
  vesselName_not: String

  """All values that are contained in given list."""
  vesselName_in: [String!]

  """All values that are not contained in given list."""
  vesselName_not_in: [String!]

  """All values less than the given value."""
  vesselName_lt: String

  """All values less than or equal the given value."""
  vesselName_lte: String

  """All values greater than the given value."""
  vesselName_gt: String

  """All values greater than or equal the given value."""
  vesselName_gte: String

  """All values containing the given string."""
  vesselName_contains: String

  """All values not containing the given string."""
  vesselName_not_contains: String

  """All values starting with the given string."""
  vesselName_starts_with: String

  """All values not starting with the given string."""
  vesselName_not_starts_with: String

  """All values ending with the given string."""
  vesselName_ends_with: String

  """All values not ending with the given string."""
  vesselName_not_ends_with: String
  weekNightPrice: Int

  """All values that are not equal to given value."""
  weekNightPrice_not: Int

  """All values that are contained in given list."""
  weekNightPrice_in: [Int!]

  """All values that are not contained in given list."""
  weekNightPrice_not_in: [Int!]

  """All values less than the given value."""
  weekNightPrice_lt: Int

  """All values less than or equal the given value."""
  weekNightPrice_lte: Int

  """All values greater than the given value."""
  weekNightPrice_gt: Int

  """All values greater than or equal the given value."""
  weekNightPrice_gte: Int
  weekendNightPrice: Int

  """All values that are not equal to given value."""
  weekendNightPrice_not: Int

  """All values that are contained in given list."""
  weekendNightPrice_in: [Int!]

  """All values that are not contained in given list."""
  weekendNightPrice_not_in: [Int!]

  """All values less than the given value."""
  weekendNightPrice_lt: Int

  """All values less than or equal the given value."""
  weekendNightPrice_lte: Int

  """All values greater than the given value."""
  weekendNightPrice_gt: Int

  """All values greater than or equal the given value."""
  weekendNightPrice_gte: Int
}

input VesselWhereUniqueInput {
  id: ID
}
