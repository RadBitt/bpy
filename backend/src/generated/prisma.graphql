# source: https://us1.prisma.sh/leonardo-m-hernandez/bpy-desktop-mysql/dev
# timestamp: Sat Jan 26 2019 17:09:25 GMT-0800 (Pacific Standard Time)

type AggregateClass {
  count: Int!
}

type AggregateInvoice {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVessel {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Class implements Node {
  id: ID!
  className: String!
  classPrice: Int!
  classDays: Int!
  classDate: String!
  vesselID: String!
  participants: Int
}

"""A connection to a list of items."""
type ClassConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClassEdge]!
  aggregate: AggregateClass!
}

input ClassCreateInput {
  className: String!
  classPrice: Int!
  classDays: Int!
  classDate: String!
  vesselID: String!
  participants: Int
}

"""An edge in a connection."""
type ClassEdge {
  """The item at the end of the edge."""
  node: Class!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClassOrderByInput {
  id_ASC
  id_DESC
  className_ASC
  className_DESC
  classPrice_ASC
  classPrice_DESC
  classDays_ASC
  classDays_DESC
  classDate_ASC
  classDate_DESC
  vesselID_ASC
  vesselID_DESC
  participants_ASC
  participants_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ClassPreviousValues {
  id: ID!
  className: String!
  classPrice: Int!
  classDays: Int!
  classDate: String!
  vesselID: String!
  participants: Int
}

type ClassSubscriptionPayload {
  mutation: MutationType!
  node: Class
  updatedFields: [String!]
  previousValues: ClassPreviousValues
}

input ClassSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClassWhereInput
}

input ClassUpdateInput {
  className: String
  classPrice: Int
  classDays: Int
  classDate: String
  vesselID: String
  participants: Int
}

input ClassUpdateManyMutationInput {
  className: String
  classPrice: Int
  classDays: Int
  classDate: String
  vesselID: String
  participants: Int
}

input ClassWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  className: String

  """All values that are not equal to given value."""
  className_not: String

  """All values that are contained in given list."""
  className_in: [String!]

  """All values that are not contained in given list."""
  className_not_in: [String!]

  """All values less than the given value."""
  className_lt: String

  """All values less than or equal the given value."""
  className_lte: String

  """All values greater than the given value."""
  className_gt: String

  """All values greater than or equal the given value."""
  className_gte: String

  """All values containing the given string."""
  className_contains: String

  """All values not containing the given string."""
  className_not_contains: String

  """All values starting with the given string."""
  className_starts_with: String

  """All values not starting with the given string."""
  className_not_starts_with: String

  """All values ending with the given string."""
  className_ends_with: String

  """All values not ending with the given string."""
  className_not_ends_with: String
  classPrice: Int

  """All values that are not equal to given value."""
  classPrice_not: Int

  """All values that are contained in given list."""
  classPrice_in: [Int!]

  """All values that are not contained in given list."""
  classPrice_not_in: [Int!]

  """All values less than the given value."""
  classPrice_lt: Int

  """All values less than or equal the given value."""
  classPrice_lte: Int

  """All values greater than the given value."""
  classPrice_gt: Int

  """All values greater than or equal the given value."""
  classPrice_gte: Int
  classDays: Int

  """All values that are not equal to given value."""
  classDays_not: Int

  """All values that are contained in given list."""
  classDays_in: [Int!]

  """All values that are not contained in given list."""
  classDays_not_in: [Int!]

  """All values less than the given value."""
  classDays_lt: Int

  """All values less than or equal the given value."""
  classDays_lte: Int

  """All values greater than the given value."""
  classDays_gt: Int

  """All values greater than or equal the given value."""
  classDays_gte: Int
  classDate: String

  """All values that are not equal to given value."""
  classDate_not: String

  """All values that are contained in given list."""
  classDate_in: [String!]

  """All values that are not contained in given list."""
  classDate_not_in: [String!]

  """All values less than the given value."""
  classDate_lt: String

  """All values less than or equal the given value."""
  classDate_lte: String

  """All values greater than the given value."""
  classDate_gt: String

  """All values greater than or equal the given value."""
  classDate_gte: String

  """All values containing the given string."""
  classDate_contains: String

  """All values not containing the given string."""
  classDate_not_contains: String

  """All values starting with the given string."""
  classDate_starts_with: String

  """All values not starting with the given string."""
  classDate_not_starts_with: String

  """All values ending with the given string."""
  classDate_ends_with: String

  """All values not ending with the given string."""
  classDate_not_ends_with: String
  vesselID: String

  """All values that are not equal to given value."""
  vesselID_not: String

  """All values that are contained in given list."""
  vesselID_in: [String!]

  """All values that are not contained in given list."""
  vesselID_not_in: [String!]

  """All values less than the given value."""
  vesselID_lt: String

  """All values less than or equal the given value."""
  vesselID_lte: String

  """All values greater than the given value."""
  vesselID_gt: String

  """All values greater than or equal the given value."""
  vesselID_gte: String

  """All values containing the given string."""
  vesselID_contains: String

  """All values not containing the given string."""
  vesselID_not_contains: String

  """All values starting with the given string."""
  vesselID_starts_with: String

  """All values not starting with the given string."""
  vesselID_not_starts_with: String

  """All values ending with the given string."""
  vesselID_ends_with: String

  """All values not ending with the given string."""
  vesselID_not_ends_with: String
  participants: Int

  """All values that are not equal to given value."""
  participants_not: Int

  """All values that are contained in given list."""
  participants_in: [Int!]

  """All values that are not contained in given list."""
  participants_not_in: [Int!]

  """All values less than the given value."""
  participants_lt: Int

  """All values less than or equal the given value."""
  participants_lte: Int

  """All values greater than the given value."""
  participants_gt: Int

  """All values greater than or equal the given value."""
  participants_gte: Int
}

input ClassWhereUniqueInput {
  id: ID
}

type Invoice implements Node {
  id: ID!
  clientId: String
  vesselName: String
  vesselId: String
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
}

"""A connection to a list of items."""
type InvoiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InvoiceEdge]!
  aggregate: AggregateInvoice!
}

input InvoiceCreateInput {
  clientId: String
  vesselName: String
  vesselId: String
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
}

"""An edge in a connection."""
type InvoiceEdge {
  """The item at the end of the edge."""
  node: Invoice!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InvoiceOrderByInput {
  id_ASC
  id_DESC
  clientId_ASC
  clientId_DESC
  vesselName_ASC
  vesselName_DESC
  vesselId_ASC
  vesselId_DESC
  charterStartDate_ASC
  charterStartDate_DESC
  charterEndDate_ASC
  charterEndDate_DESC
  totalPrice_ASC
  totalPrice_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InvoicePreviousValues {
  id: ID!
  clientId: String
  vesselName: String
  vesselId: String
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
}

type InvoiceSubscriptionPayload {
  mutation: MutationType!
  node: Invoice
  updatedFields: [String!]
  previousValues: InvoicePreviousValues
}

input InvoiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InvoiceWhereInput
}

input InvoiceUpdateInput {
  clientId: String
  vesselName: String
  vesselId: String
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
}

input InvoiceUpdateManyMutationInput {
  clientId: String
  vesselName: String
  vesselId: String
  charterStartDate: String
  charterEndDate: String
  totalPrice: Int
}

input InvoiceWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  clientId: String

  """All values that are not equal to given value."""
  clientId_not: String

  """All values that are contained in given list."""
  clientId_in: [String!]

  """All values that are not contained in given list."""
  clientId_not_in: [String!]

  """All values less than the given value."""
  clientId_lt: String

  """All values less than or equal the given value."""
  clientId_lte: String

  """All values greater than the given value."""
  clientId_gt: String

  """All values greater than or equal the given value."""
  clientId_gte: String

  """All values containing the given string."""
  clientId_contains: String

  """All values not containing the given string."""
  clientId_not_contains: String

  """All values starting with the given string."""
  clientId_starts_with: String

  """All values not starting with the given string."""
  clientId_not_starts_with: String

  """All values ending with the given string."""
  clientId_ends_with: String

  """All values not ending with the given string."""
  clientId_not_ends_with: String
  vesselName: String

  """All values that are not equal to given value."""
  vesselName_not: String

  """All values that are contained in given list."""
  vesselName_in: [String!]

  """All values that are not contained in given list."""
  vesselName_not_in: [String!]

  """All values less than the given value."""
  vesselName_lt: String

  """All values less than or equal the given value."""
  vesselName_lte: String

  """All values greater than the given value."""
  vesselName_gt: String

  """All values greater than or equal the given value."""
  vesselName_gte: String

  """All values containing the given string."""
  vesselName_contains: String

  """All values not containing the given string."""
  vesselName_not_contains: String

  """All values starting with the given string."""
  vesselName_starts_with: String

  """All values not starting with the given string."""
  vesselName_not_starts_with: String

  """All values ending with the given string."""
  vesselName_ends_with: String

  """All values not ending with the given string."""
  vesselName_not_ends_with: String
  vesselId: String

  """All values that are not equal to given value."""
  vesselId_not: String

  """All values that are contained in given list."""
  vesselId_in: [String!]

  """All values that are not contained in given list."""
  vesselId_not_in: [String!]

  """All values less than the given value."""
  vesselId_lt: String

  """All values less than or equal the given value."""
  vesselId_lte: String

  """All values greater than the given value."""
  vesselId_gt: String

  """All values greater than or equal the given value."""
  vesselId_gte: String

  """All values containing the given string."""
  vesselId_contains: String

  """All values not containing the given string."""
  vesselId_not_contains: String

  """All values starting with the given string."""
  vesselId_starts_with: String

  """All values not starting with the given string."""
  vesselId_not_starts_with: String

  """All values ending with the given string."""
  vesselId_ends_with: String

  """All values not ending with the given string."""
  vesselId_not_ends_with: String
  charterStartDate: String

  """All values that are not equal to given value."""
  charterStartDate_not: String

  """All values that are contained in given list."""
  charterStartDate_in: [String!]

  """All values that are not contained in given list."""
  charterStartDate_not_in: [String!]

  """All values less than the given value."""
  charterStartDate_lt: String

  """All values less than or equal the given value."""
  charterStartDate_lte: String

  """All values greater than the given value."""
  charterStartDate_gt: String

  """All values greater than or equal the given value."""
  charterStartDate_gte: String

  """All values containing the given string."""
  charterStartDate_contains: String

  """All values not containing the given string."""
  charterStartDate_not_contains: String

  """All values starting with the given string."""
  charterStartDate_starts_with: String

  """All values not starting with the given string."""
  charterStartDate_not_starts_with: String

  """All values ending with the given string."""
  charterStartDate_ends_with: String

  """All values not ending with the given string."""
  charterStartDate_not_ends_with: String
  charterEndDate: String

  """All values that are not equal to given value."""
  charterEndDate_not: String

  """All values that are contained in given list."""
  charterEndDate_in: [String!]

  """All values that are not contained in given list."""
  charterEndDate_not_in: [String!]

  """All values less than the given value."""
  charterEndDate_lt: String

  """All values less than or equal the given value."""
  charterEndDate_lte: String

  """All values greater than the given value."""
  charterEndDate_gt: String

  """All values greater than or equal the given value."""
  charterEndDate_gte: String

  """All values containing the given string."""
  charterEndDate_contains: String

  """All values not containing the given string."""
  charterEndDate_not_contains: String

  """All values starting with the given string."""
  charterEndDate_starts_with: String

  """All values not starting with the given string."""
  charterEndDate_not_starts_with: String

  """All values ending with the given string."""
  charterEndDate_ends_with: String

  """All values not ending with the given string."""
  charterEndDate_not_ends_with: String
  totalPrice: Int

  """All values that are not equal to given value."""
  totalPrice_not: Int

  """All values that are contained in given list."""
  totalPrice_in: [Int!]

  """All values that are not contained in given list."""
  totalPrice_not_in: [Int!]

  """All values less than the given value."""
  totalPrice_lt: Int

  """All values less than or equal the given value."""
  totalPrice_lte: Int

  """All values greater than the given value."""
  totalPrice_gt: Int

  """All values greater than or equal the given value."""
  totalPrice_gte: Int
}

input InvoiceWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createInvoice(data: InvoiceCreateInput!): Invoice!
  createVessel(data: VesselCreateInput!): Vessel!
  createClass(data: ClassCreateInput!): Class!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateInvoice(data: InvoiceUpdateInput!, where: InvoiceWhereUniqueInput!): Invoice
  updateVessel(data: VesselUpdateInput!, where: VesselWhereUniqueInput!): Vessel
  updateClass(data: ClassUpdateInput!, where: ClassWhereUniqueInput!): Class
  deleteUser(where: UserWhereUniqueInput!): User
  deleteInvoice(where: InvoiceWhereUniqueInput!): Invoice
  deleteVessel(where: VesselWhereUniqueInput!): Vessel
  deleteClass(where: ClassWhereUniqueInput!): Class
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertInvoice(where: InvoiceWhereUniqueInput!, create: InvoiceCreateInput!, update: InvoiceUpdateInput!): Invoice!
  upsertVessel(where: VesselWhereUniqueInput!, create: VesselCreateInput!, update: VesselUpdateInput!): Vessel!
  upsertClass(where: ClassWhereUniqueInput!, create: ClassCreateInput!, update: ClassUpdateInput!): Class!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyInvoices(data: InvoiceUpdateManyMutationInput!, where: InvoiceWhereInput): BatchPayload!
  updateManyVessels(data: VesselUpdateManyMutationInput!, where: VesselWhereInput): BatchPayload!
  updateManyClasses(data: ClassUpdateManyMutationInput!, where: ClassWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyInvoices(where: InvoiceWhereInput): BatchPayload!
  deleteManyVessels(where: VesselWhereInput): BatchPayload!
  deleteManyClasses(where: ClassWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  invoices(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Invoice]!
  vessels(where: VesselWhereInput, orderBy: VesselOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vessel]!
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class]!
  user(where: UserWhereUniqueInput!): User
  invoice(where: InvoiceWhereUniqueInput!): Invoice
  vessel(where: VesselWhereUniqueInput!): Vessel
  class(where: ClassWhereUniqueInput!): Class
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  invoicesConnection(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InvoiceConnection!
  vesselsConnection(where: VesselWhereInput, orderBy: VesselOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VesselConnection!
  classesConnection(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  invoice(where: InvoiceSubscriptionWhereInput): InvoiceSubscriptionPayload
  vessel(where: VesselSubscriptionWhereInput): VesselSubscriptionPayload
  class(where: ClassSubscriptionWhereInput): ClassSubscriptionPayload
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  email: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  address1: String

  """All values that are not equal to given value."""
  address1_not: String

  """All values that are contained in given list."""
  address1_in: [String!]

  """All values that are not contained in given list."""
  address1_not_in: [String!]

  """All values less than the given value."""
  address1_lt: String

  """All values less than or equal the given value."""
  address1_lte: String

  """All values greater than the given value."""
  address1_gt: String

  """All values greater than or equal the given value."""
  address1_gte: String

  """All values containing the given string."""
  address1_contains: String

  """All values not containing the given string."""
  address1_not_contains: String

  """All values starting with the given string."""
  address1_starts_with: String

  """All values not starting with the given string."""
  address1_not_starts_with: String

  """All values ending with the given string."""
  address1_ends_with: String

  """All values not ending with the given string."""
  address1_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: Int

  """All values that are not equal to given value."""
  zip_not: Int

  """All values that are contained in given list."""
  zip_in: [Int!]

  """All values that are not contained in given list."""
  zip_not_in: [Int!]

  """All values less than the given value."""
  zip_lt: Int

  """All values less than or equal the given value."""
  zip_lte: Int

  """All values greater than the given value."""
  zip_gt: Int

  """All values greater than or equal the given value."""
  zip_gte: Int
}

input UserWhereUniqueInput {
  id: ID
}

type Vessel implements Node {
  id: ID!
  vesselName: String!
  weekNightPrice: Int!
  weekendNightPrice: Int!
  vesselOwnerId: String
}

"""A connection to a list of items."""
type VesselConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VesselEdge]!
  aggregate: AggregateVessel!
}

input VesselCreateInput {
  vesselName: String!
  weekNightPrice: Int!
  weekendNightPrice: Int!
  vesselOwnerId: String
}

"""An edge in a connection."""
type VesselEdge {
  """The item at the end of the edge."""
  node: Vessel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VesselOrderByInput {
  id_ASC
  id_DESC
  vesselName_ASC
  vesselName_DESC
  weekNightPrice_ASC
  weekNightPrice_DESC
  weekendNightPrice_ASC
  weekendNightPrice_DESC
  vesselOwnerId_ASC
  vesselOwnerId_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VesselPreviousValues {
  id: ID!
  vesselName: String!
  weekNightPrice: Int!
  weekendNightPrice: Int!
  vesselOwnerId: String
}

type VesselSubscriptionPayload {
  mutation: MutationType!
  node: Vessel
  updatedFields: [String!]
  previousValues: VesselPreviousValues
}

input VesselSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VesselSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VesselSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VesselSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VesselWhereInput
}

input VesselUpdateInput {
  vesselName: String
  weekNightPrice: Int
  weekendNightPrice: Int
  vesselOwnerId: String
}

input VesselUpdateManyMutationInput {
  vesselName: String
  weekNightPrice: Int
  weekendNightPrice: Int
  vesselOwnerId: String
}

input VesselWhereInput {
  """Logical AND on all given filters."""
  AND: [VesselWhereInput!]

  """Logical OR on all given filters."""
  OR: [VesselWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VesselWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  vesselName: String

  """All values that are not equal to given value."""
  vesselName_not: String

  """All values that are contained in given list."""
  vesselName_in: [String!]

  """All values that are not contained in given list."""
  vesselName_not_in: [String!]

  """All values less than the given value."""
  vesselName_lt: String

  """All values less than or equal the given value."""
  vesselName_lte: String

  """All values greater than the given value."""
  vesselName_gt: String

  """All values greater than or equal the given value."""
  vesselName_gte: String

  """All values containing the given string."""
  vesselName_contains: String

  """All values not containing the given string."""
  vesselName_not_contains: String

  """All values starting with the given string."""
  vesselName_starts_with: String

  """All values not starting with the given string."""
  vesselName_not_starts_with: String

  """All values ending with the given string."""
  vesselName_ends_with: String

  """All values not ending with the given string."""
  vesselName_not_ends_with: String
  weekNightPrice: Int

  """All values that are not equal to given value."""
  weekNightPrice_not: Int

  """All values that are contained in given list."""
  weekNightPrice_in: [Int!]

  """All values that are not contained in given list."""
  weekNightPrice_not_in: [Int!]

  """All values less than the given value."""
  weekNightPrice_lt: Int

  """All values less than or equal the given value."""
  weekNightPrice_lte: Int

  """All values greater than the given value."""
  weekNightPrice_gt: Int

  """All values greater than or equal the given value."""
  weekNightPrice_gte: Int
  weekendNightPrice: Int

  """All values that are not equal to given value."""
  weekendNightPrice_not: Int

  """All values that are contained in given list."""
  weekendNightPrice_in: [Int!]

  """All values that are not contained in given list."""
  weekendNightPrice_not_in: [Int!]

  """All values less than the given value."""
  weekendNightPrice_lt: Int

  """All values less than or equal the given value."""
  weekendNightPrice_lte: Int

  """All values greater than the given value."""
  weekendNightPrice_gt: Int

  """All values greater than or equal the given value."""
  weekendNightPrice_gte: Int
  vesselOwnerId: String

  """All values that are not equal to given value."""
  vesselOwnerId_not: String

  """All values that are contained in given list."""
  vesselOwnerId_in: [String!]

  """All values that are not contained in given list."""
  vesselOwnerId_not_in: [String!]

  """All values less than the given value."""
  vesselOwnerId_lt: String

  """All values less than or equal the given value."""
  vesselOwnerId_lte: String

  """All values greater than the given value."""
  vesselOwnerId_gt: String

  """All values greater than or equal the given value."""
  vesselOwnerId_gte: String

  """All values containing the given string."""
  vesselOwnerId_contains: String

  """All values not containing the given string."""
  vesselOwnerId_not_contains: String

  """All values starting with the given string."""
  vesselOwnerId_starts_with: String

  """All values not starting with the given string."""
  vesselOwnerId_not_starts_with: String

  """All values ending with the given string."""
  vesselOwnerId_ends_with: String

  """All values not ending with the given string."""
  vesselOwnerId_not_ends_with: String
}

input VesselWhereUniqueInput {
  id: ID
}
